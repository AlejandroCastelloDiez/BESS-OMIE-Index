# -*- coding: utf-8 -*-
"""Deploy DASH Plot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MmJ_HwPIzWFB080VHxCR-rVvYXvHRu4_
"""

import os, time, requests, pandas as pd
from dash import Dash, html, dcc, Input, Output
import plotly.graph_objs as go
from flask import Flask

# --- Config ---
DATA_URL = os.environ.get(
    "DATA_URL",
    "https://raw.githubusercontent.com/AlejandroCastelloDiez/BESS-OMIE-Index/main/BESS%20OMIE%20Results.json"
)
WP_ORIGIN = os.environ.get("WP_ORIGIN", "https://yourwordpressdomain.com")

# --- Flask base (to add headers for iframe embedding) ---
server = Flask(__name__)

@server.after_request
def add_frame_headers(resp):
    resp.headers["Content-Security-Policy"] = f"frame-ancestors 'self' {WP_ORIGIN}"
    # Some older browsers still look at X-Frame-Options; 'ALLOW-FROM' is legacy but harmless
    resp.headers["X-Frame-Options"] = f"ALLOW-FROM {WP_ORIGIN}"
    return resp

# --- Dash app ---
app = Dash(__name__, server=server, title="BESS OMIE Index")

def fetch_df():
    # cache-buster every 5 minutes to avoid CDN/browser cache
    url = f"{DATA_URL}?t={int(time.time()//300)}"
    r = requests.get(url, timeout=20)
    r.raise_for_status()
    data = r.json()
    if not data:
        return pd.DataFrame(columns=["date","DA_Earnings","IDA1_Delta","IDA2_Delta","IDA3_Delta","IDC_Delta"])
    df = pd.DataFrame(data)
    df["date"] = pd.to_datetime(df["date"])
    return df.sort_values("date")

def make_fig(df: pd.DataFrame):
    if df.empty:
        return go.Figure(layout=dict(title="No data yet"))

    # Example: stacked bars of the stage deltas, line for total
    total = (df["DA_Earnings"].fillna(0) + df["IDA1_Delta"].fillna(0)
             + df["IDA2_Delta"].fillna(0) + df["IDA3_Delta"].fillna(0)
             + df["IDC_Delta"].fillna(0))

    fig = go.Figure()
    for col, name in [
        ("DA_Earnings", "DA"),
        ("IDA1_Delta", "IDA1"),
        ("IDA2_Delta", "IDA2"),
        ("IDA3_Delta", "IDA3"),
        ("IDC_Delta", "IDC"),
    ]:
        fig.add_bar(x=df["date"], y=df[col].fillna(0), name=name)

    fig.add_scatter(x=df["date"], y=total, name="Total", mode="lines+markers")

    fig.update_layout(
        barmode="relative",
        xaxis_title="Date",
        yaxis_title="â‚¬/MWh (daily earnings breakdown)",
        legend_title="Market",
        margin=dict(l=40, r=20, t=60, b=40),
    )
    return fig

app.layout = html.Div(
    [
        html.H3("BESS OMIE Daily Earnings"),
        dcc.Interval(id="tick", interval=12*60*60*1000, n_intervals=0),  
        dcc.Graph(id="chart"),
        html.Div(
            f"Data source: {DATA_URL}",
            style={"fontSize":"12px","opacity":0.7,"marginTop":"8px"}
        ),
    ],
    style={"maxWidth":"1100px","margin":"0 auto","padding":"12px"}
)

@app.callback(Output("chart","figure"), Input("tick","n_intervals"))
def _update(_):
    df = fetch_df()
    return make_fig(df)

if __name__ == "__main__":
    app.run_server(host="0.0.0.0", port=8050, debug=True)
